****重要：**********************************************************************************************************************
     关于UR5的URDF文件，平移和旋转表示的意思（妈了个逼，每次都正不清楚），如何看，就是打开UR5的DH_model,只放在ur_description/model.pdf
     
     举例： <joint name="${prefix}shoulder_lift_joint" type="revolute">
      <parent link="${prefix}shoulder_link" />
      <child link = "${prefix}upper_arm_link" />
      <origin xyz="0.0 ${shoulder_offset} 0.0" rpy="0.0 ${pi / 2.0} 0.0" />
      <axis xyz="0 1 0" />
      <xacro:unless value="${joint_limited}">
        <limit lower="${-2.0 * pi}" upper="${2.0 * pi}" effort="150.0" velocity="3.15"/>
      </xacro:unless>
      <xacro:if value="${joint_limited}">
        <limit lower="${shoulder_lift_lower_limit}" upper="${shoulder_lift_upper_limit}" effort="150.0" velocity="3.15"/>
      </xacro:if>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    
    上面这段中的：
     <origin xyz="0.0 ${shoulder_offset} 0.0" rpy="0.0 ${pi / 2.0} 0.0" />表示的是：
     该关节的childlink(upper_arm_link)规定的坐标系(参考DHmodel  model.pdf)经过先旋转(rpy="0.0 ${pi / 2.0} 0.0" />) 再平移 xyz="0.0 ${shoulder_offset} 0.0" 使得
     与该关节的parentlink(should_link)重合，然后还有很重要的是，<axis syz = " 0  1  0" 表示旋转轴是Y轴，那这时候
     能够在转换矩阵中，唯一改变的参数就是只有ry了，因为以y轴为旋转轴。 说这段话的意思是如何看urdf中的关于坐标系转换，1.如何转(先旋转（至于按何种顺序）进行
     旋转，我们到时候看具体的dh-model和对应给的urdf文件，当然机器人行业都是以（rz,ry,rx)的顺序进行依次旋转）， 2.一定要记得，是parentlink的坐标系转
     childlink的坐标系。
     
     注：对于别的机器人酌情对照，没有完全一样的。
    




****重要：对于UR5 VNC上面的旋转矢量描述的是： 末端坐标系tool0到基座标系的转换矩阵对应的旋转矢量信息。切记切记。
        ：但是对于aubo在器示教器上读取的数据，是通过z轴，y轴，x轴 分别旋转rz,ry,rx的顺序旋转，然后这个求出来的矩阵，是基座标转向末端tool0坐标系
        的转换矩阵，这两点区别一定要注意。
        当然：UR5 VNC程序上的坐标x,y,z和aubo示教器上的坐标x,y,z是表示末端坐标系原点相对于基座标系的坐标，这两个是一样的。
        
        AUBO之前总结的文档：
        Aubo机械手相关技术细节：
           1.示教器显示的内容：X,Y,Z,RX,RY,RZ ，如果此时目标选择坐标系C1,参考坐标系选择C2，则表示的是：  （X,Y,Z）表示坐标系C1的原点在C2坐标系下面的坐标，
           （RX,RY,RZ）表示的是坐标系C2按照z轴，y轴，x轴分别旋转角度RZ,RY,RX使得C2坐标系和C1坐标系三个轴是通向的。这一点要非常明确。
           2.Aubo机械手中配置TCP时候，都是基于相对flange的，这时候填入的参数(X,Y,Z,RX,RY,RZ)分别表示的是flange按照Z,Y,X这样的顺序旋转使得flange和TCP三轴通向，
           这里就是坐标系平行。
           3，坐标系旋转性质，如果知道坐标系C1转C2的单应矩阵，则关于原点矢量具有一下结论，HOMO(C12C2)中的偏移矢量记HOMO(C1C2).move  为 
           -1*HOMO(C1C2).trans*HOMO(C2C1).move   
           同理
           HOMO(C22C1)中的偏移矢量记HOMO(C2C1).move  为 
           -1*HOMO(C2C1).trans*HOMO(C1C2).move
           3.坐标系C1然后轴ABCDEF顺序分别以角度(Ra,Rb,Rc,Rd,Re,Rf)旋转到C2
           ,则C2肯定可以按照轴FEDCBA顺序分别以角度(Rf Re Rd, ,Rc Rb  Ra, , ,) 旋转到C1
           这个结论完全可以按照欧拉角的Rx，Ry，Rz来证明  因为(RxRyRz)的逆矩阵 就是C2转C1的方法 则等于RZ的逆矩乘Ry的逆乘以Rx的逆， 而例如反向Rx旋转就是Rx的转置，
           同时也是其逆矩阵。



        

1.关于四元数和旋转角度以及对应的旋转轴的关系不是简单相等，而是需要有一个简单的变换。
    roate_angle = alpha,  unit_directional_vector = (direc_x,direc_y,direcz) then:
    w=cos((np.rad2deg(alpha)/2)*pi/180)
    x=direc_x*sin((np.rad2deg(alpha)/2)*pi/180)
    y=direc_y*sin((np.rad2deg(alpha)/2)*pi/180)
    z=direc_z*sin((np.rad2deg(alpha)/2)*pi/180) 




2.对于ROS里面的各种集合变换，从源代码角度而言，用的是repository : ros_planning/geometry   里面核心的模块便是tf模块，所以常见的变换可以从
transform_datatype.h中找到，然后最基本的数据类型是保存在tf/LinearMath中，这里的基本数据类型主要有：  
     Matrix3x3.h  quadwword.h  Scalar.h  Vector3.h  MinMax.h  Quaternion.h  Transform.h
对于自己数据类型的构造直接找对应.h中的构造函数，对于不同之间的转换，相对复杂的转换，从transform_datatype.h寻找。


3.由于ROS中，对于函数move_group.settargetplace(geometry_msgs::Pose)这个Pose是基于base到ee_link的转换，如果享用VNC软件来比较运动轨迹的不同，这时候
就需要统一同一个姿态，因此根据ROS这个函数两个坐标系的不同，我们需要确定ee_link坐标系和tool0坐标系的关系，根据ROS官方提供的UR5_dh_model.pdf
假设等式模型是：
     POINTtool0 = [ transform matrix]POINTee_link
这个转换关系是根据ur5.urdf.xacro文件中，
关于文字描述是： 由于tool0和ee_link两个坐标系是相同原点，根据UR5的  model.pdf，可以得出其旋转顺序是
ee_link----->tool0: ee_link坐标系首先绕着Z轴旋转-pi/2,然后在旋转完之后的坐标系基础上，再绕x轴旋转-pi/2
tool0 ------>ee_link：tool0坐标系首先绕x轴旋转pi/2，然后在旋转完之后的基础上，再绕着z轴旋转pi/2
因此
transform matrix（ee_link--->tool0） = [1       0              0              0   ][cos(-pi/2)        sin(-pi/2)        0           0]
                                       [0      cos(-pi/2)    sin(-pi/2)      0    ][-sin(-pi/2)       cos(-pi/2)        0           0]
                                       [0      -sin(-pi/2)   cos(-pi/2)      0    ][0                  0                1           0]
                                       [0       0            0               1    ][0                  0                0           1]
如果对tool0 转向坐标系ee_link，可以通过上述的顺序求出来，同时也可以直接对上面矩阵求解逆矩阵。
     简要代码：
     homo_tr = quater2homo([-0.4152,-0.2265,0.422,0.7733])  #参数描述的是ee_link对应的姿态，这个姿态是ee_link转基座标的参数，切记不是
     #基座标转ee_link的转换
     rx,ry,rz =np.array([-np.pi/2, 0, -np.pi/2])
     print(rx,ry,rz)
     matx = [[1,0,0],[0,np.cos(rx),np.sin(rx)],[0,-np.sin(rx), np.cos(rx)]]
     maty = [[np.cos(ry), 0, -np.sin(ry)],[0,1,0],[np.sin(ry),0,np.cos(ry)]]
     matz = [[np.cos(rz), np.sin(rz),0],[-np.sin(rz), np.cos(rz),0],[0,0,1]]
     modify_matrix = np.dot(matx,np.dot(maty,matz)) #因此modify_matrix就是表示ee_link坐标系转tool0坐标系
     posture_matrix = np.dot(homo_tr,np.linalg.inv(modify_matrix)) #posture_matrix就是当前的tool0相对于base坐标系的转换矩阵，反向转换求逆即可
     
     vc_ma = np.array(num_obj.rot_vec2mat([1.4416,1.4255,-1.9989])) //通过VNC上读取的旋转矢量求解出tool0相对于base坐标系的转换矩阵，两则是一致的。
     
 
 由于考虑到ROS平台,UR5DH model和UR5自带程序的不同，因此在坐标系上做了简单的修改，修改项如下所示：
 修改文件： ur5.urdf.xcaro 
 一共有两处修改项：
 第一项：
            1.<joint name="${prefix}shoulder_pan_joint" type="revolute">
            2.     <parent link="${prefix}base_link" />
            3.     <child link = "${prefix}shoulder_link" />
            5.     <origin xyz="0.0 0.0 ${shoulder_height}" rpy="0.0 0.0 ${pi}" />
            6.     <axis xyz="0 0 1" />
            7.     <xacro:unless value="${joint_limited}">
            8.       <limit lower="${-2.0 * pi}" upper="${2.0 * pi}" effort="150.0" velocity="3.15"/>
             第5行本来的代码是：
              <origin xyz="0.0 0.0 ${shoulder_height}" rpy="0.0 0.0 0.0" />这是对基坐标系进行过一次180度旋转。
 第二项： 
            1.<joint name="${prefix}ee_fixed_joint" type="fixed">
            2.   <parent link="${prefix}wrist_3_link" />
            3.  <child link = "${prefix}ee_link" />
            4. <origin xyz="0.0 ${wrist_3_length} 0.0" rpy="${pi/-2.0} 0.0  0.0  " />
            5.    </joint>
            第4行的代码是：
            <origin xyz="0.0 ${wrist_3_length} 0.0" rpy="0.0 0.0 ${pi/2.0}" />
            这里这样修改的原因是ROS提供的DH Model是有别于正常我们约定的。
            DH model参考链接为：
            https://github.com/nashdingsheng/universal_robot/blob/kinetic-devel/ur_description/model.pdf
          
    

              
              
              
   
